#!/usr/bin/env python
# -*- coding: utf-8 -*-
# authorï¼šGenie time:2019/3/26
import unittest
import pandas
from multi_factor_test import MultiFactor
from HTMLTestRunner import HTMLTestRunner


class TestMultiFactor(unittest.TestCase):

    def setUp(self):
        print("set up")

    def tearDown(self):
        print("tear down")

    def test_init(self):
        d = MultiFactor("000905.SH")
        self.assertEqual(d.bench, "000905.SH")

    def test_shape(self):
        d = MultiFactor("000905.SH")
        self.assertEqual(d.nstock, 3598)

    def test_get_ic(self):
        d = MultiFactor("000905.SH")
        self.assertTrue(all(d.get_ic(d.market_value, 5).dropna().abs() <= 1))

    def test_normalize(self):
        d = MultiFactor("000905.SH")
        self.assertTrue(all(d.normalize(d.market_value).sum(axis=1).abs() < 10**(-10)))

    def test_get_combine_factor(self):
        d = MultiFactor("000905.SH")
        factor = d.dispose_factor(d.market_value)

        self.assertTrue(all(d.get_combine_factor(factor) == factor))

    def test_stock_selection_and_position(self):
        d = MultiFactor("000905.SH")
        factor = d.dispose_factor(d.market_value)
        self.assertTrue(all(d.stock_selection_and_position(factor).sum(axis=1) == 1))


# if __name__ == "__main__":
#
#     t = TestMultiFactor()
#     t.test_get_combine_factor()

if __name__ == "__main__":
    suite = unittest.TestSuite()
    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMultiFactor))

    with open('F:/module3/software engineering/code_result/HTMLReport_Multi-Factor.html', 'w') as f:
        runner = HTMLTestRunner(stream=f,
                                title='MultiFactor Test Report',
                                description='generated by HTMLTestRunner.',
                                verbosity=2
                                )
        runner.run(suite)